{"version":3,"file":"board.min.js","sources":["../src/board.js"],"sourcesContent":["import {DragDrop} from 'core/reactive';\nimport selectors from 'mod_kanban/selectors';\nimport capabilities from 'mod_kanban/capabilities';\nimport exporter from 'mod_kanban/exporter';\nimport KanbanComponent from 'mod_kanban/kanbancomponent';\nimport Log from 'core/log';\nimport {saveCancel} from 'core/notification';\nimport * as Str from 'core/str';\n\n/**\n * Component representing a kanban board.\n */\nexport default class extends KanbanComponent {\n    LOCKED_COLUMNS = 1;\n    LOCKED_COMPLETE = 2;\n\n    /**\n     * Init component\n     * @param {HTMLElement} target Element to attach the component to\n     * @returns {KanbanComponent}\n     */\n    static init(target) {\n        let element = document.getElementById(target);\n        return new this({\n            element: element,\n        });\n    }\n\n    /**\n     * Called before registering to reactive instance.\n     */\n    create() {\n        this.cmid = this.element.dataset.cmid;\n        this.id = this.element.dataset.id;\n    }\n\n    /**\n     * Watchers defined by this component.\n     * @returns {array}\n     */\n    getWatchers() {\n        return [\n            {watch: `board:updated`, handler: this._boardUpdated},\n            {watch: `columns:created`, handler: this._columnCreated},\n            {watch: `board:deleted`, handler: this._reload},\n            {watch: `common:updated`, handler: this._commonUpdated},\n        ];\n    }\n\n    /**\n     * Called once when state is ready (also if component is registered after initial state was set), attaching event\n     * isteners and initializing drag and drop.\n     * @param {*} state The initial state\n     */\n    async stateReady(state) {\n        this.addEventListener(\n            this.getElement(selectors.ADDCOLUMNFIRST),\n            'click',\n            this._addColumn\n        );\n        if (state.capabilities.get(capabilities.MANAGEBOARD).value == true) {\n            this.addEventListener(\n                this.getElement(selectors.LOCKBOARDCOLUMNS),\n                'click',\n                this._lockColumns\n            );\n            this.addEventListener(\n                this.getElement(selectors.UNLOCKBOARDCOLUMNS),\n                'click',\n                this._unlockColumns\n            );\n            this.addEventListener(\n                this.getElement(selectors.SAVEASTEMPLATE),\n                'click',\n                this._templateConfirm\n            );\n            this.addEventListener(\n                this.getElement(selectors.SHOWTEMPLATE),\n                'click',\n                this._showTemplate\n            );\n            this.addEventListener(\n                this.getElement(selectors.DELETETEMPLATE),\n                'click',\n                this._deleteTemplateConfirm\n            );\n        }\n        this.addEventListener(\n            this.getElement(selectors.DELETEBOARD),\n            'click',\n            this._deleteConfirm\n        );\n        this.addEventListener(\n            this.getElement(selectors.SCROLLLEFT),\n            'click',\n            this._scrollLeft\n        );\n        this.addEventListener(\n            this.getElement(selectors.SCROLLRIGHT),\n            'click',\n            this._scrollRight\n        );\n        this.addEventListener(\n            this.getElement(selectors.MAIN),\n            'scroll',\n            this._updateScrollButtons\n        );\n        this.dragdrop = new DragDrop(this);\n        if (state.common.liveupdate > 0) {\n            this._continuousUpdate(state.common.liveupdate);\n        }\n        this.toggleClass('ontouchstart' in document.documentElement, 'mod_kanban_touch');\n        this._updateScrollButtons();\n    }\n\n    /**\n     * Called to show template.\n     */\n    _showTemplate() {\n        window.location.href =\n            M.cfg.wwwroot +\n            '/mod/kanban/view.php?id=' +\n            this.reactive.state.common.id +\n            '&boardid=' +\n            this.reactive.state.common.template;\n    }\n\n    /**\n     * Reload current page.\n     */\n    _reload() {\n        window.location.replace(\n            M.cfg.wwwroot + '/mod/kanban/view.php?id=' + this.reactive.state.common.id +\n            '&userid=' + this.reactive.state.common.userid);\n    }\n\n    /**\n     * Start continuous update.\n     * @param {number} seconds Seconds between two refresh calls, defaults to 10\n     */\n    _continuousUpdate(seconds = 10) {\n        setInterval(() => {\n            this.reactive.dispatch('getUpdates');\n        }, seconds * 1000);\n    }\n\n    /**\n     * Called when common data was updated\n     * @param {*} param0\n     */\n    _commonUpdated({element}) {\n        this.toggleClass(element.template != 0, 'mod_kanban_hastemplate');\n    }\n\n    /**\n     * Remove all subcomponents dependencies.\n     */\n    destroy() {\n        if (this.dragdrop !== undefined) {\n            this.dragdrop.unregister();\n        }\n        this._reload();\n    }\n\n    /**\n     * Display confirmation modal for saving a board as template.\n     */\n    _templateConfirm() {\n        Str.get_strings([\n            {key: 'saveastemplate', component: 'mod_kanban'},\n            {key: 'saveastemplateconfirm', component: 'mod_kanban'},\n            {key: 'save', component: 'core'},\n        ]).then((strings) => {\n            return saveCancel(\n                strings[0],\n                strings[1],\n                strings[2],\n                () => {\n                    this._saveAsTemplate();\n                }\n            );\n        }).catch((error) => Log.debug(error));\n    }\n\n    /**\n     * Called when current board should be saved as template.\n     */\n    _saveAsTemplate() {\n        this.reactive.dispatch('saveAsTemplate');\n    }\n\n    /**\n     * Display confirmation modal for deleting a board.\n     */\n    _deleteConfirm() {\n        Str.get_strings([\n            {key: 'deleteboard', component: 'mod_kanban'},\n            {key: 'deleteboardconfirm', component: 'mod_kanban'},\n            {key: 'delete', component: 'core'},\n        ]).then((strings) => {\n            return saveCancel(\n                strings[0],\n                strings[1],\n                strings[2],\n                () => {\n                    this._deleteBoard();\n                }\n            );\n        }).catch((error) => Log.debug(error));\n    }\n\n    /**\n     * Display confirmation modal for deleting a template.\n     */\n    _deleteTemplateConfirm() {\n        Str.get_strings([\n            {key: 'deletetemplate', component: 'mod_kanban'},\n            {key: 'deletetemplateconfirm', component: 'mod_kanban'},\n            {key: 'delete', component: 'core'},\n        ]).then((strings) => {\n            return saveCancel(\n                strings[0],\n                strings[1],\n                strings[2],\n                () => {\n                    this._deleteBoard();\n                }\n            );\n        }).catch((error) => Log.debug(error));\n    }\n\n    /**\n     * Called to delete current board.\n     */\n    _deleteBoard() {\n        this.reactive.dispatch('deleteBoard');\n    }\n\n    /**\n     * Called when board was updated.\n     * @param {*} param0\n     */\n    _boardUpdated({element}) {\n        const colcontainer = this.getElement(selectors.COLUMNCONTAINER);\n        if (element.sequence !== undefined) {\n            let sequence = element.sequence.split(',');\n            // Remove all columns from frontend that are no longer present in the database.\n            [...colcontainer.children]\n                .forEach((node) => {\n                    if (node.classList.contains('mod_kanban_column') && !sequence.includes(node.dataset.id)) {\n                        colcontainer.removeChild(node);\n                    }\n                });\n            // Reorder columns according to sequence from the database.\n            [...colcontainer.children]\n                .sort((a, b) => sequence.indexOf(a.dataset.id) > sequence.indexOf(b.dataset.id) ? 1 : -1)\n                .forEach(node => colcontainer.appendChild(node));\n        }\n        // Set CSS classes to show/hide action menu items.\n        this.toggleClass(element.locked, 'mod_kanban_board_locked_columns');\n        this.toggleClass(element.hastemplate, 'mod_kanban_hastemplate');\n    }\n\n    /**\n     * Called when a new column was added. Creates a new subcomponent.\n     * @param {*} param0\n     */\n    async _columnCreated({element}) {\n        let data = Object.assign({\n            id: element.id,\n            title: element.title,\n            options: element.options,\n            sequence: element.sequence,\n        }, exporter.exportCapabilities(this.reactive.state));\n        let placeholder = document.createElement('li');\n        placeholder.setAttribute('data-id', data.id);\n        this.getElement(selectors.COLUMNCONTAINER).appendChild(placeholder);\n        const newcomponent = await this.renderComponent(placeholder, 'mod_kanban/column', data);\n        const newelement = newcomponent.getElement();\n        this.getElement(selectors.COLUMNCONTAINER).replaceChild(newelement, placeholder);\n    }\n\n    /**\n     * Called to add a column.\n     */\n    _addColumn() {\n        document.activeElement.blur();\n        // Board component only handles adding a column at the leftmost position, hence second parameter is always 0.\n        this.reactive.dispatch('addColumn', 0);\n    }\n\n    /**\n     * Called to lock all columns.\n     */\n    _lockColumns() {\n        this.reactive.dispatch('lockColumns');\n    }\n\n    /**\n     * Called to unlock all columns.\n     */\n    _unlockColumns() {\n        this.reactive.dispatch('unlockColumns');\n    }\n\n    /**\n     * Validate draggable data. This component only accepts columns.\n     * @param {object} dropdata\n     * @returns {boolean} if the data is valid for this drop-zone.\n     */\n    validateDropData(dropdata) {\n        let type = dropdata?.type;\n        return type == 'column';\n    }\n\n    /**\n     * Executed when a valid dropdata is dropped over the drop-zone.\n     * Moves the dropped column to the leftmost position (other positions are handled by column component).\n     * @param {object} dropdata\n     */\n    drop(dropdata) {\n        this.reactive.dispatch('moveColumn', dropdata.id, 0);\n    }\n\n    /**\n     * Show some visual hints to the user.\n     */\n    showDropZone() {\n        this.getElement(selectors.ADDCOLUMNCONTAINER).classList.add('mod_kanban_insert');\n    }\n\n    /**\n     * Remove visual hints to the user.\n     */\n    hideDropZone() {\n        this.getElement(selectors.ADDCOLUMNCONTAINER).classList.remove('mod_kanban_insert');\n    }\n\n    /**\n     * Scroll to the left.\n     */\n    _scrollLeft() {\n        this.getElement(selectors.MAIN).scrollLeft -= 80;\n    }\n\n    /**\n     * Scroll to the right.\n     */\n    _scrollRight() {\n        this.getElement(selectors.MAIN).scrollLeft += 80;\n    }\n\n    /**\n     * Only show scroll buttons if it's possible to scroll in this direction.\n     */\n    _updateScrollButtons() {\n        let main = this.getElement(selectors.MAIN);\n        if (main.scrollLeft <= 1) {\n            this.getElement(selectors.SCROLLLEFT).style.setProperty('visibility', 'hidden');\n        } else {\n            this.getElement(selectors.SCROLLLEFT).style.setProperty('visibility', 'visible');\n        }\n        if (main.scrollLeft < main.scrollLeftMax) {\n            this.getElement(selectors.SCROLLRIGHT).style.setProperty('visibility', 'visible');\n        } else {\n            this.getElement(selectors.SCROLLRIGHT).style.setProperty('visibility', 'hidden');\n        }\n    }\n}\n"],"names":["KanbanComponent","target","this","element","document","getElementById","create","cmid","dataset","id","getWatchers","watch","handler","_boardUpdated","_columnCreated","_reload","_commonUpdated","state","addEventListener","getElement","selectors","ADDCOLUMNFIRST","_addColumn","capabilities","get","MANAGEBOARD","value","LOCKBOARDCOLUMNS","_lockColumns","UNLOCKBOARDCOLUMNS","_unlockColumns","SAVEASTEMPLATE","_templateConfirm","SHOWTEMPLATE","_showTemplate","DELETETEMPLATE","_deleteTemplateConfirm","DELETEBOARD","_deleteConfirm","SCROLLLEFT","_scrollLeft","SCROLLRIGHT","_scrollRight","MAIN","_updateScrollButtons","dragdrop","DragDrop","common","liveupdate","_continuousUpdate","toggleClass","documentElement","window","location","href","M","cfg","wwwroot","reactive","template","replace","userid","setInterval","dispatch","destroy","undefined","unregister","Str","get_strings","key","component","then","strings","_saveAsTemplate","catch","error","Log","debug","_deleteBoard","colcontainer","COLUMNCONTAINER","sequence","split","children","forEach","node","classList","contains","includes","removeChild","sort","a","b","indexOf","appendChild","locked","hastemplate","data","Object","assign","title","options","exporter","exportCapabilities","placeholder","createElement","setAttribute","newelement","renderComponent","replaceChild","activeElement","blur","validateDropData","dropdata","type","drop","showDropZone","ADDCOLUMNCONTAINER","add","hideDropZone","remove","scrollLeft","main","style","setProperty","scrollLeftMax"],"mappings":"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"}